---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Link from '@/components/Link.astro'
import PostHead from '@/components/PostHead.astro'
import PostNavigation from '@/components/PostNavigation.astro'
import SubpostsHeader from '@/components/SubpostsHeader.astro'
import SubpostsSidebar from '@/components/SubpostsSidebar.astro'
import TOCHeader from '@/components/TOCHeader.astro'
import TOCSidebar from '@/components/TOCSidebar.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import Layout from '@/layouts/Layout.astro'
import {
  getAdjacentPosts,
  getAllPostsAndSubposts,
  getCombinedReadingTime,
  getParentId,
  getParentPost,
  getPostReadingTime,
  getSubpostCount,
  getTOCSections,
  hasSubposts,
  isSubpost,
  parseAuthors,
} from '@/lib/data-utils'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { render } from 'astro:content'

export async function getStaticPaths() {
  const posts = await getAllPostsAndSubposts()
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }))
}

const post = Astro.props
const currentPostId = Astro.params.id
const { Content, headings } = await render(post)
const authors = await parseAuthors(post.data.authors ?? [])

const isCurrentSubpost = isSubpost(currentPostId)
const navigation = await getAdjacentPosts(currentPostId)
const parentPost = isCurrentSubpost ? await getParentPost(currentPostId) : null

const hasChildPosts = await hasSubposts(currentPostId)
const subpostCount = !isCurrentSubpost
  ? await getSubpostCount(currentPostId)
  : 0
const postReadingTime = await getPostReadingTime(currentPostId)
const combinedReadingTime =
  hasChildPosts && !isCurrentSubpost
    ? await getCombinedReadingTime(currentPostId)
    : null

const tocSections = await getTOCSections(currentPostId)
---

<style>
  .placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
    transition: opacity 0.5s ease-in-out;
    position: relative;
    z-index: 1;
  }
  .zoomable-image {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 2;
  }
  .zoomable-image.loaded {
    opacity: 1;
  }
</style>

<Layout>
  <!-- Scroll Progress Bar - Optimized Implementation -->
  <div class="fixed top-0 left-0 w-full h-1 bg-gray-200 dark:bg-gray-800 z-[100] pointer-events-none overflow-hidden">
    <div 
      class="h-full bg-tertiary will-change-transform"
      id="scroll-progress-bar"
      style="width: 100%; transform: translate3d(-100%, 0, 0); transform-origin: left center;"
    ></div>
  </div>
  
  <PostHead slot="head" post={post} />
  {
    (hasChildPosts || isCurrentSubpost) && (
      <SubpostsHeader
        slot="subposts-navigation"
        parentId={isCurrentSubpost ? getParentId(currentPostId) : currentPostId}
      />
    )
  }
  {
    headings?.length > 0 &&
      !(
        isCurrentSubpost &&
        headings.length === 1 &&
        headings[0].text === post.data.title
      ) && <TOCHeader slot="table-of-contents" headings={headings} />
  }

  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(calc(var(--breakpoint-md)-2rem),100%)_minmax(0px,1fr)] gap-y-6"
  >
    <div class="col-start-2">
      <Breadcrumbs
        items={[
          { href: '/blog', label: 'Blog', icon: 'lucide:library-big' },
          ...(isCurrentSubpost && parentPost
            ? [
                {
                  href: `/blog/${parentPost.id}`,
                  label: parentPost.data.title,
                  icon: 'lucide:book-open',
                },
                {
                  href: `/blog/${currentPostId}`,
                  label: post.data.title,
                  icon: 'lucide:file-text',
                },
              ]
            : [
                {
                  href: `/blog/${currentPostId}`,
                  label: post.data.title,
                  icon: 'lucide:book-open-text',
                },
              ]),
        ]}
      />
    </div>

    {
      post.data.image && (
      <div class="relative col-span-full mx-auto w-full max-w-[300px]" style="padding-left: 0 !important; padding-right: 0!important;">
        <div
          class="aspect-[300/157.5] placeholder rounded-xl bg-gray-200 dark:bg-gray-900 absolute top-0 left-0 w-full h-full"
          id={`placeholder-${post.data.title}`}
        >
          <div class="w-full h-full rounded-xl bg-gray-200 dark:bg-gray-900 flex items-center justify-center">
            <Icon name="lucide:image" class="h-10 w-10 text-gray-400 dark:text-gray-700" />
          </div>
        </div>
        <Image 
          src={post.data.image}
          alt={post.data.title}
          width={300}
          height={157.5}
          class="zoomable-image w-full h-full object-cover rounded-xl absolute top-0 left-0"
          loading="lazy"
          style="border-radius: 0.75rem !important;"
          onload={`document.getElementById('placeholder-${post.data.title}').classList.add('hidden'); this.classList.add('loaded');`}
        />
      </div>
      )
    }

    <section class="col-start-2 flex flex-col gap-y-6 text-center">
      <div class="flex flex-col">
        <h1
          class="mb-2 scroll-mt-31 text-6xl leading-none font-black sm:text-4xl"
          id="post-title"
        >
          {post.data.title}
        </h1>
        <span class="text-primary bg-ring/30 lg:rounded-full rounded-xl text-lg font-normal leading-6 mx-14 px-6 py-3 mb-4">
          {post.data.description}
        </span>        

        <div
          class="text-muted-foreground divide-border mb-4 flex flex-col items-center justify-center divide-y text-xs sm:flex-row sm:flex-wrap sm:divide-x sm:divide-y-0 sm:text-sm"
        >
          {
            authors.length > 0 && (
              <div class="flex w-full items-center justify-center gap-x-2 py-2 sm:w-fit sm:px-2 sm:py-0 first:sm:pl-0 last:sm:pr-0">
                {authors.map((author) => (
                  <div class="flex items-center gap-x-1.5">
                    <Image
                      src={author.avatar}
                      alt={author.name}
                      width={20}
                      height={20}
                      class="rounded-full"
                    />
                    {author.isRegistered ? (
                      <Link
                        href={`/authors/${author.id}`}
                        underline
                        class="text-foreground"
                      >
                        <span>{author.name}</span>
                      </Link>
                    ) : (
                      <span>{author.name}</span>
                    )}
                  </div>
                ))}
              </div>
            )
          }

          <div
            class="flex w-full items-center justify-center gap-2 py-2 sm:w-fit sm:px-2 sm:py-0 first:sm:pl-0 last:sm:pr-0"
          >
            <span>{formatDate(post.data.date)}</span>
          </div>

          <div
            class="flex w-full items-center justify-center gap-2 py-2 sm:w-fit sm:px-2 sm:py-0 first:sm:pl-0 last:sm:pr-0"
          >
            <span>
              {postReadingTime}
              {
                combinedReadingTime &&
                  combinedReadingTime !== postReadingTime && (
                    <span class="text-muted-foreground">
                      {' '}
                      ({combinedReadingTime} total)
                    </span>
                  )
              }
            </span>
          </div>

          {
            subpostCount > 0 && (
              <div class="flex w-full items-center justify-center gap-1 py-2 sm:w-fit sm:px-2 sm:py-0 first:sm:pl-0 last:sm:pr-0">
                <Icon name="lucide:file-text" class="size-3" />
                {subpostCount} subpost{subpostCount === 1 ? '' : 's'}
              </div>
            )
          }
        </div>
        <div class="flex flex-wrap justify-center gap-2">
          {
            post.data.tags &&
              post.data.tags.length > 0 &&
              post.data.tags.map((tag) => (
                <a
                  href={`/tags/${tag}`}
                  class={badgeVariants({ variant: 'muted' })}
                >
                  {/* <Icon name="lucide:hash" class="size-3" /> */}
                  {tag}
                </a>
              ))
          }
        </div>
      </div>

      <PostNavigation
        newerPost={navigation.newer}
        olderPost={navigation.older}
        parentPost={isCurrentSubpost ? navigation.parent : undefined}
      />
    </section>

    {
      tocSections.length > 0 && (
        <TOCSidebar sections={tocSections} currentPostId={currentPostId} />
      )
    }

    <article class="prose col-start-2 max-w-xl">
    <!-- <article class="prose col-start-2 max-w-xl"> -->
      <Content />
    </article>

    {
      (hasChildPosts || isCurrentSubpost) && (
        <SubpostsSidebar
          parentId={
            isCurrentSubpost ? getParentId(currentPostId) : currentPostId
          }
          className="w-64"
        />
      )
    }

    <PostNavigation
      newerPost={navigation.newer}
      olderPost={navigation.older}
      parentPost={isCurrentSubpost ? navigation.parent : undefined}
    />
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed right-8 bottom-8 z-50 hidden cursor-pointer"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  <script>
    function scrollToTop() {
      const scrollToTopButton = document.getElementById('scroll-to-top');
      const footer = document.querySelector('footer');

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' });
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect();
          const isFooterVisible = footerRect.top <= window.innerHeight;

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
    }

    function initScrollProgress() {
      const progressBar = document.getElementById('scroll-progress-bar');
      
      if (!progressBar) {
        console.error('Progress bar element not found!');
        return;
      }
      
      // Cache DOM measurements to avoid repeated reflows
      let docHeight = 0;
      let windowHeight = 0;
      let lastKnownScrollPosition = 0;
      let ticking = false;
      
      // Recalculate dimensions only when needed
      const updateDimensions = () => {
        windowHeight = window.innerHeight;
        docHeight = document.documentElement.scrollHeight - windowHeight;
      };
      
      // Efficient progress update using transform instead of width
      const updateProgress = () => {
        const scrollTop = window.scrollY;
        
        // Skip if scroll position hasn't changed significantly
        if (Math.abs(scrollTop - lastKnownScrollPosition) < 1) {
          ticking = false;
          return;
        }
        
        lastKnownScrollPosition = scrollTop;
        
        if (docHeight <= 0) {
          updateDimensions();
          if (docHeight <= 0) {
            ticking = false;
            return;
          }
        }
        
        const scrollPercent = (scrollTop / docHeight) * 100;
        const clampedPercent = Math.max(0, Math.min(100, scrollPercent));
        
        // Use transform with translate3d for hardware acceleration
        // This is more efficient than changing width
        const translateX = clampedPercent - 100;
        progressBar.style.transform = `translate3d(${translateX}%, 0, 0)`;
        
        ticking = false;
      };
      
      // Throttled scroll handler using requestAnimationFrame
      const onScroll = () => {
        if (!ticking) {
          requestAnimationFrame(updateProgress);
          ticking = true;
        }
      };
      
      // Debounced resize handler to recalculate dimensions
      let resizeTimeout: ReturnType<typeof setTimeout> | undefined;
      const onResize = () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
          updateDimensions();
          updateProgress();
        }, 150);
      };
      
      // Initial setup
      updateDimensions();
      
      // Set initial transform to start at 0%
      progressBar.style.transform = 'translate3d(-100%, 0, 0)';
      progressBar.style.transformOrigin = 'left center';
      
      // Add event listeners
      window.addEventListener('scroll', onScroll, { passive: true });
      window.addEventListener('resize', onResize, { passive: true });
      
      // Initial update
      requestAnimationFrame(updateProgress);
      
      // Return cleanup function for potential future use
      return () => {
        window.removeEventListener('scroll', onScroll);
        window.removeEventListener('resize', onResize);
        clearTimeout(resizeTimeout);
      };
    }

    document.addEventListener('astro:page-load', scrollToTop);
    document.addEventListener('astro:page-load', initScrollProgress);

    function initMobileTOC() {
      window.MobileTOCController.cleanup?.();
      window.MobileTOCController.init();
    }

    document.addEventListener('astro:page-load', initMobileTOC);
    document.addEventListener('astro:after-swap', initMobileTOC);    
  </script>
</Layout>
