---
import AvatarComponent from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import {
  getCombinedReadingTime,
  getSubpostCount,
  isSubpost,
  parseAuthors,
} from '@/lib/data-utils'
import { formatDate } from '@/lib/utils'
import { getThumbnailColors } from '@/lib/thumbnail-colors'
import { TAG_CLASSES } from '@/consts'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import Link from './Link.astro'

interface Props {
  entry: CollectionEntry<'blog'>
}

const { entry } = Astro.props
const formattedDate = formatDate(entry.data.date)
const readTime = await getCombinedReadingTime(entry.id)
const authors = await parseAuthors(entry.data.authors ?? [])
const subpostCount = !isSubpost(entry.id) ? await getSubpostCount(entry.id) : 0

/* ---------- tag styling helper ---------- */
const getTagClasses = (tag: string) => {
  const tagLower = tag.toLowerCase()
  // Check for exact matches first
  if (TAG_CLASSES[tagLower]) {
    return TAG_CLASSES[tagLower]
  }
  // Check for partial matches
  for (const [key, classes] of Object.entries(TAG_CLASSES)) {
    if (tagLower.includes(key)) {
      return classes
    }
  }
  // Default classes
  return 'flex items-center gap-x-1 text-xs'
}

/* ---------- visual theming ---------- */
const thumb = getThumbnailColors(entry.data)                 // ← NEW
const card  = (() => {
  if (!entry.data.cardBgColor) return { hasBg:false }
  return {
    hasBg:true,
    light: entry.data.cardBgColor,
    dark:  entry.data.cardBgColorDark ?? entry.data.cardBgColor,
  }
})()

const cssVars = {
  bgLight: card.light,
  bgDark:  card.dark,
  thumbIconLight: thumb.iconLight,
  thumbIconDark:  thumb.iconDark,
  thumbBgLight:   thumb.bgLight,
  thumbBgDark:    thumb.bgDark,
}
---


<style define:vars={cssVars}>
  /* card background */
  .blog-card-bg         { background-color: var(--bgLight); }
  :root[data-theme='dark']
  .blog-card-bg         { background-color: var(--bgDark); }

  /* thumbnail */
  .thumbnail            { background: var(--thumbBgLight); }
  .thumbnail-icon       { color: var(--thumbIconLight); }
  :root[data-theme='dark']
  .thumbnail            { background: var(--thumbBgDark); }
  :root[data-theme='dark']
  .thumbnail-icon       { color: var(--thumbIconDark); }
</style>

<div
  class={`hover:bg-secondary/50 hover-card rounded-xl border p-3 transition-colors duration-300 ease-in-out ${card.hasBg ? 'blog-card-bg' : ''}`}
>
  <Link
    href={`/${entry.collection}/${entry.id}`}
    class="flex flex-col gap-4 sm:flex-row"
  >
    {(entry.data.thumbnailIcon || entry.data.image) && (
      <div class="relative max-w-[180px] sm:flex-shrink-0">
        <div class="h-[55px] w-[70px] rounded-xl flex items-center justify-center thumbnail">
          <Icon
            name={entry.data.thumbnailIcon || 'lucide:file-text'}
            class={`thumbnail-icon ${entry.data.thumbnailIconSize || 'h-10 w-10'}`}
            style="fill:currentColor;"
          />
        </div>
      </div>
    )}

    <div class="grow">
      <h3 class="text-wrap text-xl font-extrabold leading-none mb-1">
        {entry.data.title}
      </h3>
      <p class="text-muted-foreground mb-1 text-sm font-medium leading-tight">
        {entry.data.description}
      </p>

      <div class="text-muted-foreground mt-2 flex flex-wrap items-center gap-x-2 text-xs">
        <span>{formattedDate}</span>
        <Separator orientation="vertical" className="h-4!" />
        <span>{readTime}</span>

        {subpostCount > 0 && (
          <>
            <Separator orientation="vertical" className="h-4!" />
            <span class="flex items-center gap-1">
              <Icon name="lucide:file-text" class="size-3" />
              {subpostCount} subpost{subpostCount === 1 ? '' : 's'}
            </span>
          </>
        )}

        {entry.data.tags?.length && (
          <>
            <Separator orientation="vertical" className="h-4!" />
            <div class="flex flex-wrap gap-1">
              {entry.data.tags.map((tag) => (
                <Badge 
                  variant="muted" 
                  classes={getTagClasses(tag)}
                >
                  {tag}
                </Badge>
              ))}
            </div>
          </>
        )}
      </div>
    </div>
  </Link>
</div>