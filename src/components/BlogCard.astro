---
import AvatarComponent from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import {
  getCombinedReadingTime,
  getSubpostCount,
  isSubpost,
  parseAuthors,
} from '@/lib/data-utils'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import Link from './Link.astro'

interface Props {
  entry: CollectionEntry<'blog'>
}

const { entry } = Astro.props
const formattedDate = formatDate(entry.data.date)
const readTime = await getCombinedReadingTime(entry.id)
const authors = await parseAuthors(entry.data.authors ?? [])
const subpostCount = !isSubpost(entry.id) ? await getSubpostCount(entry.id) : 0
---

<style>
  .placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
    transition: opacity 0.5s ease-in-out;
    position: relative;
    z-index: 1;
  }
  .zoomable-image {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 2;
  }
  .zoomable-image.loaded {
    opacity: 1;
  }
</style>

<div
  class="hover:bg-secondary/50 hover-card rounded-xl border p-3 transition-colors duration-300 ease-in-out"
>
  <Link
    href={`/${entry.collection}/${entry.id}`}
    class="flex flex-col gap-4 sm:flex-row"
  >
    {
      entry.data.image && (
      <div class="relative max-w-[200px] sm:flex-shrink-0 relative">
          <div
            class="placeholder rounded-xl bg-gray-200 dark:bg-gray-900"
            id={`placeholder-${entry.id}`}
          >
            <div class="h-[105px] w-[200px] rounded-xl bg-gray-200 dark:bg-gray-900 flex items-center justify-center ">
              <Icon name="lucide:image" class="h-10 w-10 text-gray-400 dark:text-gray-700" />
            </div>
          </div>
          <Image
            src={entry.data.image}
            alt={entry.data.title}
            width={1200}
            height={630}
            class="zoomable-image object-cover rounded-xl absolute top-0 left-0"
            loading="lazy"
            onload={`this.classList.add('loaded');`}
          />
        </div>
      )
    }

    <div class="grow">
      <h3 class="text-xl font-extrabold leading-none mb-1">{entry.data.title}</h3>
      <p class="text-muted-foreground mb-1 text-sm font-medium leading-tight">{entry.data.description}</p>

      {
        entry.data.tags && (
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map((tag) => (
              <Badge variant="muted" className="flex items-center gap-x-1">
                {/* <Icon name="lucide:hash" class="size-3" /> */}
                {tag}
              </Badge>
            ))}
          </div>
        )
      }

      <div
        class="text-muted-foreground mt-2 flex flex-wrap items-center gap-x-2 text-xs"
      >
        {
          authors.length > 0 && (
            <>
              {authors.map((author) => (
                <div class="flex items-center gap-x-1.5">
                  <AvatarComponent
                    client:load
                    src={author.avatar}
                    alt={author.name}
                    fallback={author.name[0]}
                    className="size-5 rounded-full"
                  />
                  <span>{author.name}</span>
                </div>
              ))}
              <Separator orientation="vertical" className="h-4!" />
            </>
          )
        }
        <span>{formattedDate}</span>
        <Separator orientation="vertical" className="h-4!" />
        <span>{readTime}</span>
        {
          subpostCount > 0 && (
            <>
              <Separator orientation="vertical" className="h-4!" />
              <span class="flex items-center gap-1">
                <Icon name="lucide:file-text" class="size-3" />
                {subpostCount} subpost{subpostCount === 1 ? '' : 's'}
              </span>
            </>
          )
        }
      </div>
    </div>
  </Link>
</div>
