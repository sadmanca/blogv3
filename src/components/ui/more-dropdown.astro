---
import Link from '@/components/Link.astro'
import { Icon } from 'astro-icon/components'

// Define menu items for easy maintenance and expansion
const menuItems = [
  { label: 'Uses', href: '/uses', icon: 'lucide:laptop' },
  { label: 'Reading', href: '/reading', icon: 'lucide:book' },
  { label: 'PEY', href: '/blog/pey-coop-jobs-at-uoft', icon: 'lucide:briefcase' },
  { label: 'Work Study', href: '/blog/uoft-work-study-jobs-2025-2026', icon: 'lucide:school' },
]
---

<div class="relative inline-block ml-2">
  <div class="flex items-center">
    <!-- Text container with fixed width for smooth transitions -->
    <a 
      id="random-link"
      href="/uses" 
      class="text-container text-sm capitalize text-foreground/60 transition-colors hover:text-foreground/80 hover:cursor-pointer overflow-hidden"
    >
      <!-- Current visible text -->
      <span id="current-text" class="inline-block whitespace-nowrap">More</span>
      
      <!-- Next text (initially hidden) -->
      <span id="next-text" class="absolute left-0 top-0 opacity-0 whitespace-nowrap">More</span>
    </a>
    
    <!-- Separate chevron icon for dropdown -->
    <button 
      type="button" 
      id="more-dropdown-trigger"
      class="ml-1 text-foreground/60 transition-colors hover:text-foreground/80 hover:cursor-pointer flex-shrink-0"
      aria-haspopup="true" 
      aria-expanded="false"
    >
      <Icon name="lucide:chevron-down" class="size-4 transition-transform duration-300" style="margin-top: 2.5px;" />
    </button>
  </div>

  <!-- Dropdown Menu -->
  <div 
    id="more-dropdown-content"
    class="dropdown-menu absolute right-0 mt-1 z-50 min-w-[8rem] origin-top-right rounded-md bg-background border shadow-md p-1 invisible opacity-0 scale-95 -translate-y-2"
  >
    {menuItems.map(item => (
      <div class="block">
        <Link 
          href={item.href}
          class="flex items-center transition-colors duration-300 ease-in-out hover:bg-accent hover:text-accent-foreground px-2 py-1.5 text-sm rounded-sm w-full"
        >
          <Icon name={item.icon} class="mr-2 size-4" />
          {item.label}
        </Link>
      </div>
    ))}
  </div>
</div>

<style>
  .text-container {
    position: relative;
    display: inline-block;
    width: 3em; /* Initial width */
    transition: width 0.5s ease-in-out;
  }

  #current-text, #next-text {
    transition: opacity 0.25s ease;
  }

  .dropdown-menu {
    transition: 
      opacity 0.2s ease, 
      transform 0.2s ease, 
      visibility 0.2s ease;
    pointer-events: none;
  }
  
  .dropdown-menu.active {
    visibility: visible;
    opacity: 1;
    transform: translateY(0) scale(100%);
    pointer-events: auto;
  }

  #more-dropdown-trigger[aria-expanded="true"] svg {
    transform: rotate(180deg);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const trigger = document.getElementById('more-dropdown-trigger');
    const content = document.getElementById('more-dropdown-content');
    const currentText = document.getElementById('current-text');
    const nextText = document.getElementById('next-text');
    const randomLink = document.getElementById('random-link');
    
    // Enable transitions on all header elements
    document.querySelectorAll('header *').forEach(el => {
      if (el instanceof HTMLElement) {
        el.style.transition = el.style.transition + ', width 0.5s ease-in-out, margin 0.5s ease-in-out';
      }
    });
    
    const menuItems = [
      { label: 'Uses', href: '/uses', icon: 'lucide:laptop' },
      { label: 'Reading', href: '/reading', icon: 'lucide:book' },
      { label: 'PEY', href: '/blog/pey-coop-jobs-at-uoft', icon: 'lucide:briefcase' },
      { label: 'Work Study', href: '/blog/work-study-at-uoft', icon: 'lucide:school' },
    ];
    
    let currentIndex = -1;
    let isChanging = false;
    
    // Function to measure text width
    function getTextWidth(text: string, element: HTMLElement): number {
      const tempSpan = document.createElement('span');
      tempSpan.style.visibility = 'hidden';
      tempSpan.style.position = 'absolute';
      tempSpan.style.fontSize = window.getComputedStyle(element).fontSize;
      tempSpan.style.fontFamily = window.getComputedStyle(element).fontFamily;
      tempSpan.style.fontWeight = window.getComputedStyle(element).fontWeight;
      tempSpan.style.whiteSpace = 'nowrap';
      tempSpan.textContent = text;
      document.body.appendChild(tempSpan);
      
      const width = tempSpan.offsetWidth;
      document.body.removeChild(tempSpan);
      return width;
    }
    
    // Update exact container width for current text
    if (currentText && randomLink) {
      const width = getTextWidth(currentText.textContent || 'More', currentText);
      (randomLink as HTMLElement).style.width = `${width}px`;
    }
    
    // Cross-fade text animation with proper width transition
    function updateTextWithCrossFade() {
      if (isChanging || !currentText || !nextText || !randomLink) return;
      
      isChanging = true;
      
      // Get random index different from current one
      let newIndex;
      do {
        newIndex = Math.floor(Math.random() * menuItems.length);
      } while (newIndex === currentIndex && menuItems.length > 1);
      
      currentIndex = newIndex;
      const newLabel = menuItems[currentIndex].label;
      const newHref = menuItems[currentIndex].href;
      
      // Set up next text with new content
      nextText.textContent = newLabel;
      
      // Get width of new text
      const newWidth = getTextWidth(newLabel, currentText) + 1; // +1px buffer
      
      // Start transition - fade out current text
      currentText.style.opacity = '0';
      
      // Start animating width at the same time
      (randomLink as HTMLElement).style.width = `${newWidth}px`;
      
      // Update the link destination and finish text transition
      setTimeout(() => {
        // Update link href
        (randomLink as HTMLAnchorElement).href = newHref;
        
        // Fade in next text
        nextText.style.opacity = '1';
        
        // Complete the transition
        setTimeout(() => {
          currentText.textContent = newLabel;
          currentText.style.opacity = '1';
          nextText.style.opacity = '0';
          isChanging = false;
        }, 300);
      }, 250); // Slightly shorter to sync with width animation
    }
    
    // Initial text update
    setTimeout(() => {
      // Set initial width before first change
      if (currentText && randomLink) {
        const initialWidth = getTextWidth('More', currentText) + 1;
        (randomLink as HTMLElement).style.width = `${initialWidth}px`;
      }
      updateTextWithCrossFade();
    }, 1000);
    
    // Set interval to change text every 20 seconds
    const intervalId = setInterval(updateTextWithCrossFade, 20000);
    
    // Dropdown functionality
    if (trigger && content) {
      trigger.addEventListener('click', (e) => {
        e.stopPropagation();
        content.classList.toggle('active');
        trigger.setAttribute('aria-expanded', content.classList.contains('active') ? 'true' : 'false');
      });
      
      document.addEventListener('click', (e) => {
        if (!trigger.contains(e.target as Node)) {
          content.classList.remove('active');
          trigger.setAttribute('aria-expanded', 'false');
        }
      });
      
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && content.classList.contains('active')) {
          content.classList.remove('active');
          trigger.setAttribute('aria-expanded', 'false');
        }
      });
    }
    
    // Clean up interval on page unload
    window.addEventListener('beforeunload', () => {
      clearInterval(intervalId);
    });
  });
</script>