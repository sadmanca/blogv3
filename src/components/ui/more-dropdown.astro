---
import Link from '@/components/Link.astro'
import { Icon } from 'astro-icon/components'

const menuItems = [
  { label: 'Uses', href: '/uses', icon: 'lucide:laptop' },
  { label: 'Reading', href: '/reading', icon: 'lucide:book' },
  { label: 'PEY', href: '/blog/pey-coop-jobs-at-uoft', icon: 'lucide:briefcase' },
  { label: 'Work Study', href: '/blog/work-study-at-uoft', icon: 'lucide:school' },
];
---

<div class="more-dropdown inline-flex items-center transition-[width] duration-[1s] ease-in-out">
  <div class="flex items-center">
    <a
      class="more-dropdown-link group px-0 py-0 capitalize text-foreground/60 transition-colors hover:text-foreground/80 hover:cursor-pointer bg-transparent border-none flex items-center ml-2 text-sm"
      data-href="/uses"
      data-label="Uses"
      tabindex="0"
      role="button"
      aria-haspopup="true"
      aria-expanded="false"
    >
      <span
        class="more-dropdown-text block transition-opacity transition-transform duration-[1s] ease-in-out whitespace-nowrap"
      >
        More
      </span>
    </a>
    <button
      class="more-dropdown-trigger group px-0 py-0 text-foreground/60 transition-colors hover:text-foreground/80 hover:cursor-pointer bg-transparent border-none ml-1"
      title="Show all options"
      aria-expanded="false"
      aria-haspopup="true"
    >
      <svg class="size-4" style="margin-top: 2.5px;" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <polyline points="6,9 12,15 18,9"></polyline>
      </svg>
    </button>
  </div>

  <div class="more-dropdown-content bg-background border rounded-md shadow-md p-1 min-w-[8rem] hidden absolute right-0 top-full mt-1 z-50">
    {menuItems.map(item => (
      <div class="more-dropdown-item" tabindex="-1">
        <Link
          href={item.href}
          class="flex items-center transition-colors duration-[3s] ease-in-out hover:decoration-foreground hover:cursor-pointer px-2 py-1.5 text-sm rounded-sm hover:bg-accent hover:text-accent-foreground w-full"
        >
          {item.icon && <Icon name={item.icon} class="mr-2 size-4" />}
          {item.label}
        </Link>
      </div>
    ))}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const dropdown = document.querySelector('.more-dropdown');
    const trigger = dropdown?.querySelector('.more-dropdown-trigger');
    const content = dropdown?.querySelector('.more-dropdown-content');
    const linkElement = dropdown?.querySelector('.more-dropdown-link');
    const textElement = dropdown?.querySelector('.more-dropdown-text');
    if (!trigger || !content || !linkElement || !textElement) return;

    // Use menuItems order for dropdown, but randomize navbar rotation order
    const menuLabels = ['More', ...Array.from(content.querySelectorAll('.more-dropdown-item a')).map(a => a.textContent?.trim() ?? '')];
    // For navbar rotation, randomize the order except 'More'
    function shuffle<T>(array: T[]): T[] {
      let currentIndex = array.length, randomIndex;
      while (currentIndex !== 0) {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;
        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
      }
      return array;
    }
    const randomizedLabels = [menuLabels[0], ...shuffle(menuLabels.slice(1))];
    let currentIndex = 0;
    let timeoutId;
    let paused = false;

    // Always ensure the More link has no href on first load
    linkElement.removeAttribute('href');
    linkElement.setAttribute('data-href', '#');
    linkElement.setAttribute('data-label', 'More');

    function getRandomDelay() {
      // Random delay between 7s and 18s
      return 7000 + Math.floor(Math.random() * 11000);
    }

      const updateLink = () => {
        const label = randomizedLabels[currentIndex];

        if (!textElement || !dropdown) return;

        // Fade out text
        (textElement as HTMLElement).style.opacity = '0';
        (textElement as HTMLElement).style.transform = 'translateX(5px)';

        // Measure new text width off-DOM
        const tempSpan = document.createElement('span');
        tempSpan.className = textElement.className;
        tempSpan.style.visibility = 'hidden';
        tempSpan.style.position = 'absolute';
        tempSpan.style.whiteSpace = 'nowrap';
        tempSpan.style.fontSize = getComputedStyle(textElement).fontSize;
        tempSpan.textContent = label;
        document.body.appendChild(tempSpan);
        const newWidth = tempSpan.offsetWidth;
        document.body.removeChild(tempSpan);

        // Animate dropdown container width
        (dropdown as HTMLElement).style.width = `${newWidth + 32}px`; // +padding buffer

        setTimeout(() => {
          // Swap label text
          textElement.textContent = label;

          // Update href
          if (currentIndex === 0) {
            linkElement.removeAttribute('href');
            linkElement.setAttribute('data-href', '#');
            linkElement.setAttribute('data-label', 'More');
          } else {
            const item = content.querySelectorAll('.more-dropdown-item a')[menuLabels.indexOf(label) - 1];
            const href = item?.getAttribute('href') || '';
            linkElement.setAttribute('href', href);
            linkElement.setAttribute('data-href', href);
            linkElement.setAttribute('data-label', label);
          }

          // Animate back in
          requestAnimationFrame(() => {
            (textElement as HTMLElement).style.opacity = '1';
            (textElement as HTMLElement).style.transform = 'translateX(0)';
          });
        }, 300); // match duration of opacity transition
      };

    function rotate() {
      if (!paused) {
        currentIndex = (currentIndex + 1) % randomizedLabels.length;
        updateLink();
      }
      timeoutId = setTimeout(rotate, getRandomDelay());
    }
    // Start rotation
    timeoutId = setTimeout(rotate, getRandomDelay());

    // Pause rotation on hover/focus, resume on mouseleave/blur
    linkElement.addEventListener('mouseenter', () => { paused = true; });
    linkElement.addEventListener('mouseleave', () => { paused = false; });
    linkElement.addEventListener('focus', () => { paused = true; });
    linkElement.addEventListener('blur', () => { paused = false; });
    trigger.addEventListener('mouseenter', () => { paused = true; });
    trigger.addEventListener('mouseleave', () => { paused = false; });

    linkElement.addEventListener('click', (e) => {
      const href = linkElement.getAttribute('data-href');
      const label = linkElement.getAttribute('data-label');
      if (!href || href === '#' || label === 'More') {
        e.preventDefault();
        // Do not allow scroll to top
        // (no href attribute means no navigation)
        const isOpen = content.classList.contains('block');
        if (isOpen) {
          content.classList.add('hidden');
          content.classList.remove('block');
          trigger.setAttribute('aria-expanded', 'false');
        } else {
          content.classList.remove('hidden');
          content.classList.add('block');
          trigger.setAttribute('aria-expanded', 'true');
        }
      }
    });

    trigger.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const isOpen = content.classList.contains('block');
      if (isOpen) {
        content.classList.add('hidden');
        content.classList.remove('block');
        trigger.setAttribute('aria-expanded', 'false');
      } else {
        content.classList.remove('hidden');
        content.classList.add('block');
        trigger.setAttribute('aria-expanded', 'true');
      }
    });

    document.addEventListener('click', (e) => {
      if (!dropdown?.contains(e.target as Node)) {
        content.classList.add('hidden');
        content.classList.remove('block');
        trigger.setAttribute('aria-expanded', 'false');
      }
    });
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        content.classList.add('hidden');
        content.classList.remove('block');
        trigger.setAttribute('aria-expanded', 'false');
      }
    });
    // Close dropdown on click of any dropdown item
    content.querySelectorAll('.more-dropdown-item a').forEach(item => {
      item.addEventListener('click', () => {
        content.classList.add('hidden');
        content.classList.remove('block');
        trigger.setAttribute('aria-expanded', 'false');
      });
    });
  });
</script>

<style>
  .more-dropdown {
    position: relative;
    display: inline-block;
  }
  
  .more-dropdown-content {
    position: absolute;
    right: 0;
    top: 100%;
    margin-top: 0.25rem;
    z-index: 50;
  }

  .more-dropdown-text {
    transition: opacity 0.3s ease, transform 0.3s ease;
    display: block;
  }
</style>
